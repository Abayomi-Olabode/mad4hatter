/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     aarandad / ampseq_workflow Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

params {

    // mandatory arguments
    readDIR         = null      // specify --readDIR in terminal
                                // or overwrite here
    sequencer       = 'nextseq' // sequencer used
    QC_only         = "F"       // Specify QC only workflows
    cutadapt_minlen = 125       // Discard trimmed reads shorter than N
    cutadapt_minlen = 100       // Discard trimmed reads shorter than N

    // boilerplate
    outDIR          = "results"  // can overwite with --outDIR
    projDIR         = "$PWD"
    reads           = "$readDIR/*_R{1,2}*.fastq.gz"
    primerDIR       = "$projDIR/fastas"
    fwd_primers     = "$primerDIR/v4_fwd.fasta"
    rev_primers     = "$primerDIR/v4_rev.fasta"
    // note: this could be parameterized
    amplicon_info   = "$projDIR/vX_amplicon_info/v4_amplicon_info.tsv"
    scriptDIR       = "$projDIR/R_code"

    // config options
    custom_config_base = "conf"

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory      = '128.GB'
    max_cpus        = 16
    max_time        = '240.h'
}

// contains resource configurations
includeConfig 'conf/base.config'

// currently all profiles use conda
includeConfig 'conf/conda.config'

try {
    includeConfig "${params.custom_config_base}/custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load custom config profile: ${params.custom_config_base}/custom.config")
}

profiles {
  sge {
    process {
        executor        = "sge"
        scratch         = true
        stageInMode     = "copy"
        stageOutMode    = "move"
        errorStrategy   = "retry"
        clusterOptions  = '-l scratch=100G -S /bin/bash -o job.log -e job.err'
    }
  }
}

manifest {
    name            = 'aarandad/ampseq_workflow'
    homePage        = 'https://github.com/aarandad/ampseq_workflow'
    description     = 'An open-source analysis pipeline to detect multiplexed amplicons'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.6'
    version         = '1.1.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}