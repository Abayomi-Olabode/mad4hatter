/*
 * WORKFLOW - DENOISE_AMPLICONS_1
 * 
 * This workflow uses DADA2 to denoise amplicons
 */

include { DADA2_PREPROCESSING } from '../modules/local/dada2_preprocessing.nf'
include { DADA2_DENOISING } from '../modules/local/dada2_denoising.nf'
include { DADA2_POSTPROCESSING } from '../modules/local/dada2_postprocessing.nf'
include { DADA2_DEREPLICATE } from '../modules/local/dada2_dereplicate.nf'
include { COLLAPSE_CONCATENATED_READS } from '../modules/local/collapse_concatenated_reads.nf'
include { DADA2_LEARN_ERRORS } from '../modules/local/dada2_learn_errors.nf'

workflow DENOISE_AMPLICONS_1 {

  take:
  demultiplexed_fastqs

  main:
      
  // Step 1: dada2_preprocessing
  DADA2_PREPROCESSING(
    demultiplexed_fastqs,
    params.minLen,
    params.maxN,
    params.rm_phix,
    params.compress,
    params.matchIDs,
    params.maxEE_R1,
    params.truncQ_R1,
    params.trimRight_R1,
    params.trimLeft_R1,
    params.maxEE_R2,
    params.truncQ_R2,
    params.trimRight_R2,
    params.trimLeft_R2
  )

  // Step 2: dada2_dereplication
  DADA2_DEREPLICATE(
    DADA2_PREPROCESSING.out.filtFs,
    DADA2_PREPROCESSING.out.filtRs,
    DADA2_PREPROCESSING.out.filter_metadata,
    params.verbose
  )

  // Step 2: Learn Errors
  DADA2_LEARN_ERRORS(
    DADA2_PREPROCESSING.out.filtFs.collect(),
    DADA2_PREPROCESSING.out.filtRs.collect(),
    DADA2_PREPROCESSING.out.filter_metadata.collect(),
    params.maxConsist,
    params.randomize
  )

  
  // Step 3: dada2_denoising
  DADA2_DENOISING(
    DADA2_DEREPLICATE.out.dereps_F,
    DADA2_DEREPLICATE.out.dereps_R,
    DADA2_LEARN_ERRORS.out.error_model_F,
    DADA2_LEARN_ERRORS.out.error_model_R,
    params.pool,
    params.band_size,
    params.omega_a,
    params.just_concatenate,
    params.use_quals,
    params.maxEE,
    params.self_consist,
    params.omega_c,
    params.verbose,
    params.amplicon_info
  )

  // Step 4: dada2_postprocessing
  DADA2_POSTPROCESSING(
    DADA2_DENOISING.out.seqtab.collect(),
    params.amplicon_info,
    params.verbose,
    params.bimera_removal_method
  )

  // Custom code to further denoise sequences
  // generated by DADA2
  if (params.just_concatenate) {
    COLLAPSE_CONCATENATED_READS(
      DADA2_POSTPROCESSING.out.dada2_clusters
    )
  }

  emit: 
  denoise_ch = params.just_concatenate ? 
    COLLAPSE_CONCATENATED_READS.out.clusters_concatenated_collapsed : 
    DADA2_POSTPROCESSING.out.dada2_clusters
}

